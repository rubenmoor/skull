-- File auto generated by purescript-bridge! --
module Game.Types where

import Data.Lens (Lens', Prism', lens, prism')
import Data.Maybe (Maybe(..))
import Prim (Array, Boolean, Int, String)

import Prelude
import Data.Generic (class Generic)

newtype Info =
    Info {
      _giKey :: String
    , _giState :: GState
    , _giPhase :: Phase
    , _giPlayers :: Array Player
    }

derive instance genericInfo :: Generic Info

--------------------------------------------------------------------------------
_Info :: Prism' Info { _giKey :: String, _giState :: GState, _giPhase :: Phase, _giPlayers :: Array Player}
_Info = prism' Info f
  where
    f (Info r) = Just r


giKey :: Lens' Info String
giKey = lens get set
  where
    get (Info r) = r._giKey
    set (Info r) = Info <<< r { _giKey = _ }

giState :: Lens' Info GState
giState = lens get set
  where
    get (Info r) = r._giState
    set (Info r) = Info <<< r { _giState = _ }

giPhase :: Lens' Info Phase
giPhase = lens get set
  where
    get (Info r) = r._giPhase
    set (Info r) = Info <<< r { _giPhase = _ }

giPlayers :: Lens' Info (Array Player)
giPlayers = lens get set
  where
    get (Info r) = r._giPlayers
    set (Info r) = Info <<< r { _giPlayers = _ }

--------------------------------------------------------------------------------
data GState =
    Round Int
  | Finished VictoryInfo
  | Aborted String

derive instance genericGState :: Generic GState

--------------------------------------------------------------------------------
_Round :: Prism' GState Int
_Round = prism' Round f
  where
    f (Round a) = Just $ a
    f _ = Nothing

_Finished :: Prism' GState VictoryInfo
_Finished = prism' Finished f
  where
    f (Finished a) = Just $ a
    f _ = Nothing

_Aborted :: Prism' GState String
_Aborted = prism' Aborted f
  where
    f (Aborted a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
newtype VictoryInfo =
    VictoryInfo {
      _viWinner :: String
    , _viType :: VictoryType
    , _viRounds :: Int
    }

derive instance genericVictoryInfo :: Generic VictoryInfo

--------------------------------------------------------------------------------
_VictoryInfo :: Prism' VictoryInfo { _viWinner :: String, _viType :: VictoryType, _viRounds :: Int}
_VictoryInfo = prism' VictoryInfo f
  where
    f (VictoryInfo r) = Just r


viWinner :: Lens' VictoryInfo String
viWinner = lens get set
  where
    get (VictoryInfo r) = r._viWinner
    set (VictoryInfo r) = VictoryInfo <<< r { _viWinner = _ }

viType :: Lens' VictoryInfo VictoryType
viType = lens get set
  where
    get (VictoryInfo r) = r._viType
    set (VictoryInfo r) = VictoryInfo <<< r { _viType = _ }

viRounds :: Lens' VictoryInfo Int
viRounds = lens get set
  where
    get (VictoryInfo r) = r._viRounds
    set (VictoryInfo r) = VictoryInfo <<< r { _viRounds = _ }

--------------------------------------------------------------------------------
data VictoryType =
    TwoWins 
  | Survivor 

derive instance genericVictoryType :: Generic VictoryType

--------------------------------------------------------------------------------
_TwoWins :: Prism' VictoryType Unit
_TwoWins = prism' (\_ -> TwoWins) f
  where
    f TwoWins = Just unit
    f _ = Nothing

_Survivor :: Prism' VictoryType Unit
_Survivor = prism' (\_ -> Survivor) f
  where
    f Survivor = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data Phase =
    FirstCard 
  | CardOrBet 
  | Bet 
  | Reveal 

derive instance genericPhase :: Generic Phase

--------------------------------------------------------------------------------
_FirstCard :: Prism' Phase Unit
_FirstCard = prism' (\_ -> FirstCard) f
  where
    f FirstCard = Just unit
    f _ = Nothing

_CardOrBet :: Prism' Phase Unit
_CardOrBet = prism' (\_ -> CardOrBet) f
  where
    f CardOrBet = Just unit
    f _ = Nothing

_Bet :: Prism' Phase Unit
_Bet = prism' (\_ -> Bet) f
  where
    f Bet = Just unit
    f _ = Nothing

_Reveal :: Prism' Phase Unit
_Reveal = prism' (\_ -> Reveal) f
  where
    f Reveal = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
newtype Player =
    Player {
      _plKey :: String
    , _plNature :: Nature
    , _plVictory :: Victory
    , _plHand :: Hand
    , _plAlive :: Boolean
    , _plStack :: Stack
    , _plBetState :: BetState
    }

derive instance genericPlayer :: Generic Player

--------------------------------------------------------------------------------
_Player :: Prism' Player { _plKey :: String, _plNature :: Nature, _plVictory :: Victory, _plHand :: Hand, _plAlive :: Boolean, _plStack :: Stack, _plBetState :: BetState}
_Player = prism' Player f
  where
    f (Player r) = Just r


plKey :: Lens' Player String
plKey = lens get set
  where
    get (Player r) = r._plKey
    set (Player r) = Player <<< r { _plKey = _ }

plNature :: Lens' Player Nature
plNature = lens get set
  where
    get (Player r) = r._plNature
    set (Player r) = Player <<< r { _plNature = _ }

plVictory :: Lens' Player Victory
plVictory = lens get set
  where
    get (Player r) = r._plVictory
    set (Player r) = Player <<< r { _plVictory = _ }

plHand :: Lens' Player Hand
plHand = lens get set
  where
    get (Player r) = r._plHand
    set (Player r) = Player <<< r { _plHand = _ }

plAlive :: Lens' Player Boolean
plAlive = lens get set
  where
    get (Player r) = r._plAlive
    set (Player r) = Player <<< r { _plAlive = _ }

plStack :: Lens' Player Stack
plStack = lens get set
  where
    get (Player r) = r._plStack
    set (Player r) = Player <<< r { _plStack = _ }

plBetState :: Lens' Player BetState
plBetState = lens get set
  where
    get (Player r) = r._plBetState
    set (Player r) = Player <<< r { _plBetState = _ }

--------------------------------------------------------------------------------
data Victory =
    None 
  | One 

derive instance genericVictory :: Generic Victory

--------------------------------------------------------------------------------
_None :: Prism' Victory Unit
_None = prism' (\_ -> None) f
  where
    f None = Just unit
    f _ = Nothing

_One :: Prism' Victory Unit
_One = prism' (\_ -> One) f
  where
    f One = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data Nature =
    Human 
  | Bot 

derive instance genericNature :: Generic Nature

--------------------------------------------------------------------------------
_Human :: Prism' Nature Unit
_Human = prism' (\_ -> Human) f
  where
    f Human = Just unit
    f _ = Nothing

_Bot :: Prism' Nature Unit
_Bot = prism' (\_ -> Bot) f
  where
    f Bot = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
newtype Hand =
    Hand {
      _hNumPlains :: Int
    , _hHasSkull :: Boolean
    }

derive instance genericHand :: Generic Hand

--------------------------------------------------------------------------------
_Hand :: Prism' Hand { _hNumPlains :: Int, _hHasSkull :: Boolean}
_Hand = prism' Hand f
  where
    f (Hand r) = Just r


hNumPlains :: Lens' Hand Int
hNumPlains = lens get set
  where
    get (Hand r) = r._hNumPlains
    set (Hand r) = Hand <<< r { _hNumPlains = _ }

hHasSkull :: Lens' Hand Boolean
hHasSkull = lens get set
  where
    get (Hand r) = r._hHasSkull
    set (Hand r) = Hand <<< r { _hHasSkull = _ }

--------------------------------------------------------------------------------
newtype Stack =
    Stack (Array Card)

derive instance genericStack :: Generic Stack

--------------------------------------------------------------------------------
_Stack :: Prism' Stack (Array Card)
_Stack = prism' Stack f
  where
    f (Stack a) = Just $ a


--------------------------------------------------------------------------------
data Card =
    Skull 
  | Plain 

derive instance genericCard :: Generic Card

--------------------------------------------------------------------------------
_Skull :: Prism' Card Unit
_Skull = prism' (\_ -> Skull) f
  where
    f Skull = Just unit
    f _ = Nothing

_Plain :: Prism' Card Unit
_Plain = prism' (\_ -> Plain) f
  where
    f Plain = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data BetState =
    NothingYet 
  | BetSet Int
  | Fold 

derive instance genericBetState :: Generic BetState

--------------------------------------------------------------------------------
_NothingYet :: Prism' BetState Unit
_NothingYet = prism' (\_ -> NothingYet) f
  where
    f NothingYet = Just unit
    f _ = Nothing

_BetSet :: Prism' BetState Int
_BetSet = prism' BetSet f
  where
    f (BetSet a) = Just $ a
    f _ = Nothing

_Fold :: Prism' BetState Unit
_Fold = prism' (\_ -> Fold) f
  where
    f Fold = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
